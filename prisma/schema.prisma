generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  clerkUserId  String        @unique
  email        String        @unique
  name         String?
  imageUrl     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accounts     Account[]
  budgets      Budget[]
  categories   categories[]
  transactions Transaction[]

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0)
  currency     String
  isDefault    Boolean       @default(false)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String             @id @default(uuid())
  type              TransactionType
  amount            Decimal
  currency          String
  description       String?
  date              DateTime
  receiptUrl        String?
  isRecurring       Boolean            @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  status            TransactionStatus  @default(COMPLETED)
  notes             String?
  userId            String
  categoryId        String
  accountId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  account           Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  categories        categories         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@map("transactions")
}

model Budget {
  id         String       @id @default(uuid())
  amount     Decimal
  currency   String
  period     BudgetPeriod
  startDate  DateTime
  endDate    DateTime?
  userId     String
  categoryId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  categories categories   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@map("budgets")
}

model categories {
  id           String          @id
  name         String
  type         TransactionType
  color        String?
  icon         String?
  userId       String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  budgets      Budget[]
  users        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
